{"version":3,"sources":["serviceWorker.js","home/Home.js","dashboard/Dashboard.js","Invoices/Invoices.js","Invoices/Invoice/Invoice.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","Dashboard","props","name","Invoices","to","children","Invoice","invoiceId","App","process","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCdC,SAASC,IACd,OACE,6BACE,oCADF,gB,OCFG,SAASC,EAAUC,GACxB,OACE,6BACE,yCADF,qBACuCA,EAAMC,M,OCF1C,SAASC,EAASF,GACvB,OACE,6BACE,wCACA,4BACE,4BACE,kBAAC,IAAD,CAAMG,GAAG,iBAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,iBAIHH,EAAMI,U,OCdN,SAASC,EAAQL,GACtB,OACE,6BACE,+CACA,8CAAoBA,EAAMM,YC2BjBC,MAxBf,WACE,OACE,6BACE,6CACiBC,eADjB,IAEGA,QAFH,KAIA,6BACE,kBAAC,IAAD,CAAML,GAAG,KAAT,QAAyB,IACzB,kBAAC,IAAD,CAAMA,GAAG,mBAAT,uBAAsD,IACtD,kBAAC,IAAD,CAAMA,GAAG,oBAAT,wBAAwD,IACxD,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAEF,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMM,KAAK,MACX,kBAAC,EAAD,CAAWA,KAAK,qBAChB,kBAAC,EAAD,CAAUA,KAAK,aACb,kBAAC,EAAD,CAASA,KAAK,mBCjBxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SNsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7d10dc04.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nimport './Home.scss';\r\n\r\nexport function Home() {\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>I am at home\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Dashboard.scss';\r\n\r\nexport function Dashboard(props) {\r\n  return (\r\n    <div>\r\n      <h1>Dashboard</h1>I am at dashboard {props.name}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Invoices.scss';\r\nimport { Link } from '@reach/router';\r\n\r\nexport function Invoices(props) {\r\n  return (\r\n    <div>\r\n      <h1>Invoices</h1>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/invoices/123\">Invoice 123</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/invoices/abc\">Invoice ABC</Link>\r\n        </li>\r\n      </ul>\r\n\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Invoice.scss';\r\n\r\nexport function Invoice(props) {\r\n  return (\r\n    <div>\r\n      <h1>Invoice For Me.</h1>\r\n      <p>I am at Invoice {props.invoiceId}</p>\r\n    </div>\r\n  );\r\n}\r\n","// @flow\n\nimport React from 'react';\nimport './App.scss';\n\nimport { Link, Router } from '@reach/router';\nimport { Home } from './home/Home';\nimport { Dashboard } from './dashboard/Dashboard';\nimport { Invoices } from './Invoices/Invoices';\nimport { Invoice } from './Invoices/Invoice/Invoice';\n\nfunction App() {\n  return (\n    <div>\n      <h1>\n        Tutorial! for {process.env.REACT_APP_NAME}(\n        {process.env.REACT_APP_ENVIRONMENT})\n      </h1>\n      <nav>\n        <Link to=\"/\">Home</Link>{' '}\n        <Link to=\"dashboard/users\">Dashboard For Users</Link>{' '}\n        <Link to=\"dashboard/admins\">Dashboard For Admins</Link>{' '}\n        <Link to=\"invoices\">Invoices</Link>\n      </nav>\n      <Router>\n        <Home path=\"/\" />\n        <Dashboard path=\"/dashboard/:name\" />\n        <Invoices path=\"/invoices\">\n          <Invoice path=\":invoiceId\"></Invoice>\n        </Invoices>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}